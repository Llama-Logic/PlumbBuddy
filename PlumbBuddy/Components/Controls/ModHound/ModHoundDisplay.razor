@inherits ReactiveComponentBase
@inject IDialogService DialogService
@inject IMarkupLocalizer<AppText> MarkupLocalizer
@inject IModHoundClient ModHoundClient
@inject IDbContextFactory<PbDbContext> PbDbContextFactory
@inject IPlatformFunctions PlatformFunctions
@inject ISettings Settings
@inject IStringLocalizer<AppText> StringLocalizer
@inject ISuperSnacks SuperSnacks

<MudGrid Class="mt-1" Justify="Justify.Center">
	<MudItem Class="mod-hound-outline overflow-y-auto" xs="3">
		<MudStack AlignItems="AlignItems.Center">
			<MudImage Src="/img/ModHoundLogo.png" Style="width: 80%; aspect-ratio: 1 / 1;" />
			@if (Observed(() => ModHoundClient.Status) is { } status)
			{
				<MudTextM3 Align="Align.Center">
					@status
				</MudTextM3>
			}
			else
			{
				<MudButtonGroup Color="Color.Primary" Variant="Variant.Filled">
					<MudButton OnClick="ModHoundClient.RequestReport" StartIcon="@MaterialDesignIcons.Normal.CloudRefresh">
						@StringLocalizer[nameof(AppText.ModHoundDisplay_RequestNewReport_Label)]
					</MudButton>
					<MudTooltip Arrow Text="@AppText.ModHoundDisplay_ManageSettings_Tip">
						<MudIconButton Icon="@MaterialDesignIcons.Normal.Cog" OnClick="HandleShowSettingsAsync" />
					</MudTooltip>
				</MudButtonGroup>
			}
			@if (Observed(() => ModHoundClient.RequestPhase) is { } requestPhase)
			{
				if (requestPhase is 2 or 3 && Observed(() => ModHoundClient.ProgressValue) is { } value && Observed(() => ModHoundClient.ProgressMax) is { } max)
				{
					if (requestPhase is 2)
					{
						<MudProgressLinear Buffer BufferValue="@value" Color="Color.Primary" Max="@max" />
					}
					else
					{
						<MudProgressLinear Buffer BufferValue="@max" Color="Color.Primary" Max="@max" Value="@value" />
					}
				}
				else
				{
					<MudProgressLinear Color="Color.Primary" Indeterminate />
				}
			}
			@if (ObservedCollection(() => ModHoundClient.AvailableReports) is { Count: > 0 } availableReports)
			{
				<MudSelect @bind-Value="@(Binding(() => ModHoundClient.SelectedReport).Value)" Adornment="Adornment.Start" AdornmentColor="Color.Primary" AdornmentIcon="@MaterialDesignIcons.Normal.ChartBox" Label="@AppText.ModHoundDisplay_DisplayReport_Label" Variant="Variant.Filled">
					@foreach (var availableReport in availableReports.OrderByDescending(ar => ar.Retrieved))
					{
						<MudSelectItem Value="@availableReport" />
					}
				</MudSelect>
			}
			@if (Observed(() => ModHoundClient.SelectedReport) is { } selectedReport)
			{
				int outdatedCount = (Observed(() => ModHoundClient.OutdatedCount) ?? 0);
				int duplicatesCount = (Observed(() => ModHoundClient.DuplicatesCount) ?? 0);
				int brokenObsoleteCount = (Observed(() => ModHoundClient.BrokenObsoleteCount) ?? 0);
				int incompatibleCount = (Observed(() => ModHoundClient.IncompatibleCount) ?? 0);
				int missingRequirementsCount = (Observed(() => ModHoundClient.MissingRequirementsCount) ?? 0);
				int unknownStatusCount = (Observed(() => ModHoundClient.UnknownStatusCount) ?? 0);
				int upToDateCount = (Observed(() => ModHoundClient.UpToDateCount) ?? 0);
				int notTrackedCount = (Observed(() => ModHoundClient.NotTrackedCount) ?? 0);
				<MudList @bind-SelectedValue="@Binding(() => ModHoundClient.SelectedReportSection).Value" Color="Color.Primary">
					<MudListItem Class="py-0" Icon="@MaterialDesignIcons.Normal.HeartBroken" IconColor="Color.Warning" IconSize="Size.Large" Style="@(outdatedCount == 0 ? "opacity: .35;" : string.Empty)" Value="@IModHoundClient.SectionOutdated">
						<MudStack AlignItems="AlignItems.Center" Row>
							<MudTextM3 Color="Color.Warning">
								@StringLocalizer[nameof(AppText.ModHoundDisplay_SectionMenu_Outdated_Label)]
							</MudTextM3>
							<MudSpacer />
							<MudChip T="int?" Color="Color.Warning" Value="@outdatedCount" />
						</MudStack>
					</MudListItem>
					<MudListItem Class="py-0" Icon="@MaterialDesignIcons.Normal.InboxMultiple" IconColor="Color.Warning" IconSize="Size.Large" Style="@(duplicatesCount == 0 ? "opacity: .35;" : string.Empty)" Value="IModHoundClient.SectionDuplicates">
						<MudStack AlignItems="AlignItems.Center" Row>
							<MudTextM3 Color="Color.Warning">
								@StringLocalizer[nameof(AppText.ModHoundDisplay_SectionMenu_Duplicates_Label)]
							</MudTextM3>
							<MudSpacer />
							<MudChip T="int?" Color="Color.Warning" Value="@duplicatesCount" />
						</MudStack>
					</MudListItem>
					<MudListItem Class="py-0" Icon="@MaterialDesignIcons.Normal.SkullCrossbones" IconColor="Color.Error" IconSize="Size.Large" Style="@(brokenObsoleteCount == 0 ? "opacity: .35;" : string.Empty)" Value="IModHoundClient.SectionBrokenObsolete">
						<MudStack AlignItems="AlignItems.Center" Row>
							<MudTextM3 Color="Color.Error">
								@StringLocalizer[nameof(AppText.ModHoundDisplay_SectionMenu_BrokenObsolete_Label)]
							</MudTextM3>
							<MudSpacer />
							<MudChip T="int?" Color="Color.Error" Value="@brokenObsoleteCount" />
						</MudStack>
					</MudListItem>
					<MudListItem Class="py-0" Icon="@MaterialDesignIcons.Normal.NotEqualVariant" IconColor="Color.Error" IconSize="Size.Large" Style="@(incompatibleCount == 0 ? "opacity: .35;" : string.Empty)" Value="IModHoundClient.SectionIncompatible">
						<MudStack AlignItems="AlignItems.Center" Row>
							<MudTextM3 Color="Color.Error">
								@StringLocalizer[nameof(AppText.ModHoundDisplay_SectionMenu_Incompatible_Label)]
							</MudTextM3>
							<MudSpacer />
							<MudChip T="int?" Color="Color.Error" Value="@incompatibleCount" />
						</MudStack>
					</MudListItem>
					<MudListItem Class="py-0" Icon="@MaterialDesignIcons.Normal.ImageBroken" IconColor="Color.Error" IconSize="Size.Large" Style="@(missingRequirementsCount == 0 ? "opacity: .35;" : string.Empty)" Value="IModHoundClient.SectionMissingRequirements">
						<MudStack AlignItems="AlignItems.Center" Row>
							<MudTextM3 Color="Color.Error">
								@StringLocalizer[nameof(AppText.ModHoundDisplay_SectionMenu_MissingRequirements_Label)]
							</MudTextM3>
							<MudSpacer />
							<MudChip T="int?" Color="Color.Error" Value="@missingRequirementsCount" />
						</MudStack>
					</MudListItem>
					<MudListItem Class="py-0" Icon="@MaterialDesignIcons.Normal.LightbulbQuestion" IconSize="Size.Large" Style="@(unknownStatusCount == 0 ? "opacity: .35;" : string.Empty)" Value="IModHoundClient.SectionUnknownStatus">
						<MudStack AlignItems="AlignItems.Center" Row>
							<MudTextM3>
								@StringLocalizer[nameof(AppText.ModHoundDisplay_SectionMenu_UnknownStatus_Label)]
							</MudTextM3>
							<MudSpacer />
							<MudChip T="int?" Value="@unknownStatusCount" />
						</MudStack>
					</MudListItem>
					<MudListItem Class="py-0" Icon="@MaterialDesignIcons.Normal.LightbulbOn" IconColor="Color.Success" IconSize="Size.Large" Style="@(upToDateCount == 0 ? "opacity: .35;" : string.Empty)" Value="IModHoundClient.SectionUpToDate">
						<MudStack AlignItems="AlignItems.Center" Row>
							<MudTextM3 Color="Color.Success">
								@StringLocalizer[nameof(AppText.ModHoundDisplay_SectionMenu_UpToDate_Label)]
							</MudTextM3>
							<MudSpacer />
							<MudChip T="int?" Color="Color.Success" Value="@upToDateCount" />
						</MudStack>
					</MudListItem>
					<MudListItem Class="py-0" Icon="@MaterialDesignIcons.Normal.TrackLightOff" IconSize="Size.Large" Style="@(notTrackedCount == 0 ? "opacity: .35;" : string.Empty)" Value="IModHoundClient.SectionNotTracked">
						<MudStack AlignItems="AlignItems.Center" Row>
							<MudTextM3>
								@StringLocalizer[nameof(AppText.ModHoundDisplay_SectionMenu_NotTracked_Label)]
							</MudTextM3>
							<MudSpacer />
							<MudChip T="int?" Value="@notTrackedCount" />
						</MudStack>
					</MudListItem>
				</MudList>
			}
			<MudTextM3 Align="Align.Center" Class="markdown-caption">
				<MudMarkdown Value="@AppText.ModHoundDisplay_SupportLumpinou_Label" />
			</MudTextM3>
		</MudStack>
	</MudItem>
	<MudItem Class="mod-hound-report py-0" xs="9">
		@if (Observed(() => ModHoundClient.SelectedReport) is { } displayedReport && Observed(() => ModHoundClient.SelectedReportSection) is { } displayedReportSection)
		{
			var searchText = Observed(() => ModHoundClient.SearchText);
			if (displayedReportSection is IModHoundClient.SectionOutdated or IModHoundClient.SectionDuplicates or IModHoundClient.SectionBrokenObsolete or IModHoundClient.SectionUnknownStatus or IModHoundClient.SectionUpToDate)
			{
				<MudTable T="ModHoundReportRecord" @ref="@recordsTable" Breakpoint="Breakpoint.Sm" Class="rounded my-0 break-words" Dense FixedHeader Height="calc(100vh - 280px)" Hover Outlined ServerData="LoadRecordsAsync" Virtualize>
					<ToolBarContent>
						<MudStack Spacing="0" Style="width: 80%;">
							<MudTextM3 Typo="TypoM3.Title">
								@(
									displayedReportSection switch
									{
										IModHoundClient.SectionOutdated => AppText.ModHoundDisplay_SectionMenu_Outdated_Label,
										IModHoundClient.SectionDuplicates => AppText.ModHoundDisplay_SectionMenu_Duplicates_Label,
										IModHoundClient.SectionBrokenObsolete => AppText.ModHoundDisplay_SectionMenu_BrokenObsolete_Label,
										IModHoundClient.SectionUnknownStatus => AppText.ModHoundDisplay_SectionMenu_UnknownStatus_Label,
										IModHoundClient.SectionUpToDate => AppText.ModHoundDisplay_SectionMenu_UpToDate_Label,
										_ => throw new NotSupportedException()
									}
								)
							</MudTextM3>
							<MudTextM3 Typo="TypoM3.Title" Size="Size.Small">
								@(
									displayedReportSection switch
									{
										IModHoundClient.SectionOutdated => AppText.ModHoundDisplay_Section_Outdated_Subtitle,
										IModHoundClient.SectionDuplicates => AppText.ModHoundDisplay_Section_Duplicates_Subtitle,
										IModHoundClient.SectionBrokenObsolete => AppText.ModHoundDisplay_Section_BrokenObsolete_Subtitle,
										IModHoundClient.SectionUnknownStatus => AppText.ModHoundDisplay_Section_UnknownStatus_Subtitle,
										IModHoundClient.SectionUpToDate => AppText.ModHoundDisplay_Section_UpToDate_Subtitle,
										_ => throw new NotSupportedException()
									}
								)
							</MudTextM3>

						</MudStack>
						<MudSpacer />
						<MudTextField @bind-Value="@(Binding(() => ModHoundClient.SearchText).Value)" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Class="mt-0" Clearable DebounceInterval="250" IconSize="Size.Medium" Immediate Placeholder="@(AppText.Common_Search)" />
					</ToolBarContent>
					<HeaderContent>
						<MudTh>
						</MudTh>
						<MudTh>
							<MudTableSortLabel SortLabel="FileName" SortBy="new Func<ModHoundReportRecord, object>(mhrr => mhrr.FileName)">
								@StringLocalizer[nameof(AppText.ModHoundDisplay_ColumnHeader_FileName)]
							</MudTableSortLabel>
						</MudTh>
						<MudTh>
							<MudTableSortLabel SortLabel="ModName" SortBy="new Func<ModHoundReportRecord, object>(mhrr => mhrr.ModName)">
								@StringLocalizer[nameof(AppText.ModHoundDisplay_ColumnHeader_ModName)]
							</MudTableSortLabel>
						</MudTh>
						<MudTh>
							<MudTableSortLabel SortLabel="CreatorName" SortBy="new Func<ModHoundReportRecord, object>(mhrr => mhrr.CreatorName)">
								@StringLocalizer[nameof(AppText.ModHoundDisplay_ColumnHeader_CreatorName)]
							</MudTableSortLabel>
						</MudTh>
						<MudTh>
							<MudTableSortLabel SortLabel="LastUpdateDate" SortBy="new Func<ModHoundReportRecord, object>(mhrr => mhrr.LastUpdateDate)">
								@StringLocalizer[nameof(AppText.ModHoundDisplay_ColumnHeader_LastUpdateDate)]
							</MudTableSortLabel>
						</MudTh>
						<MudTh>
							<MudTableSortLabel SortLabel="DateOfInstalledFile" SortBy="new Func<ModHoundReportRecord, object>(mhrr => mhrr.DateOfInstalledFile)">
								@StringLocalizer[nameof(AppText.ModHoundDisplay_ColumnHeader_DateOfInstalledFile)]
							</MudTableSortLabel>
						</MudTh>
						<MudTh>
							@StringLocalizer[nameof(AppText.ModHoundDisplay_ColumnHeader_UpdateNotes)]
						</MudTh>
					</HeaderContent>
					<RowTemplate>
						<MudTd>
							<MudStack Row Spacing="0">
								<MudTooltip Arrow Text="@AppText.CatalogDisplay_Files_ViewThisFile_Tip">
									<MudIconButton Icon="@MaterialDesignIcons.Normal.FileFind" OnClick="@(() => ViewModHoundReportRecordFile(context))" Size="Size.Small" />
								</MudTooltip>
								<MudTooltip Arrow Text="@AppText.ModHoundDisplay_DownloadThisMod_Tip">
									<MudIconButton Disabled="@(context.ModLinkOrIndexHref is null)" Icon="@MaterialDesignIcons.Normal.Download" OnClick="@(() => DownloadModHoundReportRecordUpdateAsync(context))" Size="Size.Small" />
								</MudTooltip>
							</MudStack>
						</MudTd>
						<MudTd DataLabel="@AppText.ModHoundDisplay_ColumnHeader_FileName">
							<MudHighlighter HighlightedText="@searchText" Text="@context.FileName" />
						</MudTd>
						<MudTd DataLabel="@AppText.ModHoundDisplay_ColumnHeader_ModName">
							<MudHighlighter HighlightedText="@searchText" Text="@context.ModName" />
						</MudTd>
						<MudTd DataLabel="@AppText.ModHoundDisplay_ColumnHeader_CreatorName">
							<MudHighlighter HighlightedText="@searchText" Text="@context.CreatorName" />
						</MudTd>
						<MudTd DataLabel="@AppText.ModHoundDisplay_ColumnHeader_LastUpdateDate">
							<MudHighlighter HighlightedText="@searchText" Text="@context.LastUpdateDateString" />
						</MudTd>
						<MudTd DataLabel="@AppText.ModHoundDisplay_ColumnHeader_DateOfInstalledFile">
							<MudHighlighter HighlightedText="@searchText" Text="@context.DateOfInstalledFileString" />
						</MudTd>
						<MudTd DataLabel="@AppText.ModHoundDisplay_ColumnHeader_UpdateNotes">
							<MudHighlighter HighlightedText="@searchText" Text="@context.UpdateNotes" />
						</MudTd>
					</RowTemplate>
					<PagerContent>
						<MudTablePager />
					</PagerContent>
					<NoRecordsContent>
						@(
							displayedReportSection switch
							{
								IModHoundClient.SectionOutdated => AppText.ModHoundDisplay_Section_Outdated_NoResults_Label,
								IModHoundClient.SectionDuplicates => AppText.ModHoundDisplay_Section_Duplicates_NoResults_Label,
								IModHoundClient.SectionBrokenObsolete => AppText.ModHoundDisplay_Section_BrokenObsolete_NoResults_Label,
								IModHoundClient.SectionUnknownStatus => AppText.ModHoundDisplay_Section_UnknownStatus_NoResults_Label,
								IModHoundClient.SectionUpToDate => AppText.ModHoundDisplay_Section_UpToDate_NoResults_Label,
								_ => throw new NotSupportedException()
							}
						)
					</NoRecordsContent>
				</MudTable>
			}
			else if (displayedReportSection is IModHoundClient.SectionIncompatible)
			{
				var records = ObservedCollection(() => ModHoundClient.SelectedReportIncompatibilityRecords).Select((record, index) => (record, index)).Where(tuple => string.IsNullOrWhiteSpace(searchText) || (tuple.record.Parts ?? Enumerable.Empty<ModHoundReportIncompatibilityRecordPart>()).Any(part => part.Label.Contains(searchText, StringComparison.OrdinalIgnoreCase)));
				<MudPaper Class="stop-backdrop-blur px-4 py-2" Outlined>
					<MudStack AlignItems="AlignItems.Center" Row>
						<MudStack Spacing="0" Style="width: 80%;">
							<MudTextM3 Typo="TypoM3.Title">
								@StringLocalizer[nameof(AppText.ModHoundDisplay_SectionMenu_Incompatible_Label)]
							</MudTextM3>
							<MudTextM3 Typo="TypoM3.Title" Size="Size.Small">
								@StringLocalizer[nameof(AppText.ModHoundDisplay_Section_Incompatible_Subtitle)]
							</MudTextM3>
						</MudStack>
						<MudSpacer />
						<MudTextField @bind-Value="@(Binding(() => ModHoundClient.SearchText).Value)" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Class="mt-0" Clearable DebounceInterval="250" IconSize="Size.Medium" Immediate Placeholder="@(AppText.Common_Search)" />
					</MudStack>
					@if (records.Any())
					{
						<MudExpansionPanels Class="mt-2 overflow-y-auto" MultiExpansion Style="height: calc(100vh - 236px);">
							@foreach (var (incompatibilityRecord, index) in records)
							{
								<MudExpansionPanel>
									<TitleContent>
										<div class="d-flex">
											<MudIcon Icon="@MaterialDesignIcons.Normal.NotEqualVariant" class="mr-3"></MudIcon>
											<MudTextM3>
												@StringLocalizer[AppText.ModHoundDisplay_Section_Incompatibility_RecordHeader_Format, (index + 1).ToOrdinalWords().Transform(To.TitleCase)]
											</MudTextM3>
										</div>
									</TitleContent>
									<ChildContent>
										<MudList T="ModHoundReportIncompatibilityRecordPart">
											@foreach (var part in incompatibilityRecord?.Parts ?? Enumerable.Empty<ModHoundReportIncompatibilityRecordPart>())
											{
												<MudListItem Icon="@MaterialDesignIcons.Normal.Certificate" OnClick="@(() => ViewModHoundReportIncompatibilityRecordPartFile(part))" Value="@part">
													<MudHighlighter HighlightedText="@searchText" Text="@(part.Label)" />
												</MudListItem>
											}
										</MudList>
									</ChildContent>
								</MudExpansionPanel>
							}
						</MudExpansionPanels>
					}
					else
					{
						<MudTextM3 Align="Align.Center" Class="pa-8" Style="height: calc(100vh - 228px);">
							<strong>
								@StringLocalizer[nameof(AppText.ModHoundDisplay_Section_Incompatible_NoResults_Label)]
							</strong>
						</MudTextM3>
					}
				</MudPaper>
			}
			else if (displayedReportSection is IModHoundClient.SectionMissingRequirements)
			{
				var records = ObservedCollection(() => ModHoundClient.SelectedReportMissingRequirementsRecords).Select((record, index) => (record, index)).Where(tuple => string.IsNullOrWhiteSpace(searchText) || (tuple.record.Dependencies ?? Enumerable.Empty<ModHoundReportMissingRequirementsRecordDependency>()).Any(dependency => dependency.Label.Contains(searchText, StringComparison.OrdinalIgnoreCase)) || (tuple.record.Dependents ?? Enumerable.Empty<ModHoundReportMissingRequirementsRecordDependent>()).Any(dependent => dependent.Label.Contains(searchText, StringComparison.OrdinalIgnoreCase)));
				<MudPaper Class="stop-backdrop-blur px-4 py-2" Outlined>
					<MudStack AlignItems="AlignItems.Center" Row>
						<MudStack Spacing="0" Style="width: 80%;">
							<MudTextM3 Typo="TypoM3.Title">
								@StringLocalizer[nameof(AppText.ModHoundDisplay_SectionMenu_MissingRequirements_Label)]
							</MudTextM3>
							<MudTextM3 Typo="TypoM3.Title" Size="Size.Small">
								@StringLocalizer[nameof(AppText.ModHoundDisplay_Section_MissingRequirements_Subtitle)]
							</MudTextM3>
						</MudStack>
						<MudSpacer />
						<MudTextField @bind-Value="@(Binding(() => ModHoundClient.SearchText).Value)" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Class="mt-0" Clearable DebounceInterval="250" IconSize="Size.Medium" Immediate Placeholder="@(AppText.Common_Search)" />
					</MudStack>
					@if (records.Any())
					{
						<MudExpansionPanels Class="mt-2 overflow-y-auto" MultiExpansion Style="height: calc(100vh - 236px);">
							@foreach (var (missingRequirementsRecord, index) in records)
							{
								<MudExpansionPanel>
									<TitleContent>
										<div class="d-flex">
											<MudIcon Icon="@MaterialDesignIcons.Normal.ImageBroken" class="mr-3"></MudIcon>
											<MudTextM3>
												@StringLocalizer[AppText.ModHoundDisplay_Section_MissingRequirements_RecordHeader_Format, (index + 1).ToOrdinalWords().Transform(To.TitleCase)]
											</MudTextM3>
										</div>
									</TitleContent>
									<ChildContent>
										<MudNavMenu>
											<MudNavGroup Expanded Icon="@MaterialDesignIcons.Normal.Alert" IconColor="Color.Warning" Title="@AppText.ModHoundDisplay_Section_MissingRequirements_Dependents_Label">
												@foreach (var dependent in missingRequirementsRecord?.Dependents ?? Enumerable.Empty<ModHoundReportMissingRequirementsRecordDependent>())
												{
													<MudNavLink Href="javascript:void(0)" Icon="@MaterialDesignIcons.Normal.Certificate">
														<MudTextM3>
															<MudHighlighter HighlightedText="@searchText" Text="@(dependent.Label)" />
														</MudTextM3>
													</MudNavLink>
												}
											</MudNavGroup>
											<MudNavGroup Expanded Icon="@MaterialDesignIcons.Normal.Asterisk" IconColor="Color.Error" Title="@AppText.ModHoundDisplay_Section_MissingRequirements_Dependencies_Label">
												@foreach (var dependency in missingRequirementsRecord?.Dependencies ?? Enumerable.Empty<ModHoundReportMissingRequirementsRecordDependency>())
												{
													<MudNavLink Href="@(dependency.ModLinkOrIndexHref is { } href ? href.ToString() : "javascript:void(0)")" Icon="@MaterialDesignIcons.Normal.Certificate" Target="@(dependency.ModLinkOrIndexHref is null ? string.Empty : "_blank")">
														<MudTooltip Arrow Text="@AppText.ModHoundDisplay_DownloadThisMod_Tip">
															<MudStack Spacing="0">
																<MudTextM3>
																	<MudHighlighter HighlightedText="@searchText" Text="@(dependency.Label)" />
																</MudTextM3>
																<MudTextM3 Typo="TypoM3.Label" Size="Size.Small">
																	@(dependency.ModLinkOrIndexHref)
																</MudTextM3>
															</MudStack>
														</MudTooltip>
													</MudNavLink>
												}
											</MudNavGroup>
										</MudNavMenu>
									</ChildContent>
								</MudExpansionPanel>
							}
						</MudExpansionPanels>
					}
					else
					{
						<MudTextM3 Align="Align.Center" Class="pa-8" Style="height: calc(100vh - 228px);">
							<strong>
								@StringLocalizer[nameof(AppText.ModHoundDisplay_Section_MissingRequirements_NoResults_Label)]
							</strong>
						</MudTextM3>
					}
				</MudPaper>
			}
			else if (displayedReportSection is IModHoundClient.SectionNotTracked)
			{
				<MudTable T="ModHoundReportNotTrackedRecord" @ref="@notTrackedRecordsTable" Breakpoint="Breakpoint.Sm" Class="rounded my-0 break-words" Dense FixedHeader Height="calc(100vh - 280px)" Hover Outlined ServerData="LoadNotTrackedRecordsAsync" Virtualize>
					<ToolBarContent>
						<MudTextM3 Typo="TypoM3.Title" Style="width: 80%;">
							@StringLocalizer[nameof(AppText.ModHoundDisplay_SectionMenu_NotTracked_Label)]
						</MudTextM3>
						<MudSpacer />
						<MudTextField @bind-Value="@(Binding(() => ModHoundClient.SearchText).Value)" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Class="mt-0" Clearable DebounceInterval="250" IconSize="Size.Medium" Immediate Placeholder="@(AppText.Common_Search)" />
					</ToolBarContent>
					<HeaderContent>
						<MudTh>
							<MudTableSortLabel SortLabel="FileName" SortBy="new Func<ModHoundReportNotTrackedRecord, object>(mhrr => mhrr.FileName)">
								@StringLocalizer[nameof(AppText.ModHoundDisplay_ColumnHeader_FileName)]
							</MudTableSortLabel>
						</MudTh>
						<MudTh>
							<MudTableSortLabel SortLabel="FileDate" SortBy="new Func<ModHoundReportNotTrackedRecord, object>(mhrr => mhrr.FileDate)">
								@StringLocalizer[nameof(AppText.ModHoundDisplay_ColumnHeader_FileDate)]
							</MudTableSortLabel>
						</MudTh>
						<MudTh>
							<MudTableSortLabel SortLabel="FileType" SortBy="new Func<ModHoundReportNotTrackedRecord, object>(mhrr => mhrr.FileType)">
								@StringLocalizer[nameof(AppText.ModHoundDisplay_ColumnHeader_FileType)]
							</MudTableSortLabel>
						</MudTh>
					</HeaderContent>
					<RowTemplate>
						<MudTd DataLabel="@AppText.ModHoundDisplay_ColumnHeader_FileName">
							<MudHighlighter HighlightedText="@searchText" Text="@context.FileName" />
						</MudTd>
						<MudTd DataLabel="@AppText.ModHoundDisplay_ColumnHeader_FileDate">
							<MudHighlighter HighlightedText="@searchText" Text="@context.FileDateString" />
						</MudTd>
						<MudTd DataLabel="@AppText.ModHoundDisplay_ColumnHeader_FileType">
							<MudHighlighter HighlightedText="@searchText" Text="@context.FileType.ToString()" />
						</MudTd>
					</RowTemplate>
					<PagerContent>
						<MudTablePager />
					</PagerContent>
					<NoRecordsContent>
						@StringLocalizer[nameof(AppText.ModHoundDisplay_Section_NotTracked_NoResults_Label)]
					</NoRecordsContent>
				</MudTable>
			}
		}
	</MudItem>
</MudGrid>