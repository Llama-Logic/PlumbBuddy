@inject IDialogService DialogService

@if (ScanIssue is { } scanIssue)
{
	<MudItem xs="12" md="6" lg="4" xl="3" xxl="2">
		<MudCard Outlined="true" Elevation="5" Class="@($"scan-issue scan-issue-{scanIssue.Type}")">
			<MudCardHeader>
				<CardHeaderAvatar>
					<MudAvatar Variant="Variant.Outlined">
						<MudIcon Icon="@scanIssue.Icon" Size="Size.Large" />
					</MudAvatar>
				</CardHeaderAvatar>
				<CardHeaderContent>
					<MudTextM3 Typo="TypoM3.Title">
						@(scanIssue.Caption)
					</MudTextM3>
				</CardHeaderContent>
			</MudCardHeader>
			<MudCardContent>
				<MudMarkdown Value="@scanIssue.Description" />
			</MudCardContent>
			@if (scanIssue.Data is not null && scanIssue.Resolutions is not null && scanIssue.Resolutions.Count > 0)
			{
				<MudCardActions Style="flex-direction: column; gap: 6px;">
					@foreach (var resolution in scanIssue.Resolutions)
					{
						if (resolution.Url is { } url)
						{
							<MudButton StartIcon="@resolution.Icon" Color="@resolution.Color" IconColor="@resolution.Color" Href="@url.ToString()" Target="_blank" Disabled="@resolution.Disabled" Style="width: 100%;">
								@(resolution.Label)
							</MudButton>
						}
						else
						{
							<MudButton StartIcon="@resolution.Icon" Color="@resolution.Color" IconColor="@resolution.Color" OnClick="() => ResolveAsync(scanIssue, resolution)" Disabled="@resolution.Disabled" Style="width: 100%;">
								@(resolution.Label)
							</MudButton>
						}
					}
				</MudCardActions>
			}
		</MudCard>
</MudItem>
}