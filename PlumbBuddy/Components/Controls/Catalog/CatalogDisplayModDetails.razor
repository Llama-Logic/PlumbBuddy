@inherits ReactiveComponentBase
@inject ICatalog Catalog
@inject IDialogService DialogService
@inject ILogger<CatalogDisplayModDetails> Logger
@inject IMarkupLocalizer<AppText> MarkupLocalizer
@inject IPublicCatalogs PublicCatalogs
@inject ISettings Settings
@inject ISmartSimObserver SmartSimObserver
@inject IStringLocalizer<AppText> StringLocalizer

<div class="catalog-details overflow-y-auto rounded mud-paper-outlined pa-4">
	<MudGrid Justify="Justify.Center" Spacing="1">
		@if (Observed(() => Catalog.Mods) is { } mods && Observed(() => Catalog.SelectedModKey) is { } selectedModKey && mods.TryGetValue(selectedModKey, out var selectedMod))
		{
			var modSearchText = Observed(() => Catalog.ModsSearchText);
			var version = selectedMod.Select(t => t.Manifest.Version).Where(v => !string.IsNullOrWhiteSpace(v)).Cast<string>().GroupBy(v => v).OrderByDescending(g => g.Key)?.FirstOrDefault()?.Key;
			var description = selectedMod.Select(t => t.Manifest.Description).Where(d => !string.IsNullOrWhiteSpace(d)).Cast<string>().GroupBy(d => d).OrderByDescending(g => g.Count())?.FirstOrDefault()?.Key;
			var hashHex = selectedMod.Select(t => t.Manifest.Hash).First().ToHexString();
			var requiredPackCodes = selectedMod.SelectMany(t => t.Manifest.RequiredPacks).Select(pc => pc.ToUpperInvariant()).Distinct().Order().ToImmutableArray();
            var recommendPacks = selectedMod.SelectMany(t => t.Manifest.RecommendedPacks).Where(rp => !string.IsNullOrWhiteSpace(rp.PackCode)).DistinctBy(rp => rp.PackCode).ToImmutableArray();
            var incompatiblePackCodes = selectedMod.SelectMany(t => t.Manifest.IncompatiblePacks).Select(pc => pc.ToUpperInvariant()).Distinct().Order().ToImmutableArray();
			var installedPackCodes = Observed(() => SmartSimObserver.InstalledPackCodes).ToImmutableHashSet();
			var creators = selectedMod.SelectMany(t => t.Manifest.Creators).Distinct().ToImmutableArray();
			var dependencies = selectedMod.SelectMany(t => t.Dependencies).Distinct().OrderBy(k => k.Name).ThenBy(k => k.Creators ?? k.Url?.ToString() ?? string.Empty).ToImmutableArray();
			var indexableDependents = selectedMod.SelectMany(t => t.Dependents).Distinct().Where(mods.ContainsKey).OrderBy(k => k.Name).ThenBy(k => k.Creators ?? k.Url?.ToString() ?? string.Empty).ToImmutableArray();
			<MudItem Style="text-align: center;">
				<MudTextM3 Typo="TypoM3.Headline">
					<MudHighlighter Text="@(selectedModKey.Name)" HighlightedText="@modSearchText" />
					@if (!string.IsNullOrWhiteSpace(version))
					{
						<small>&#x20;<MudHighlighter Text="@version" HighlightedText="@modSearchText" /></small>
					}
				</MudTextM3>
			</MudItem>
			<MudFlexBreak />
			@if (!string.IsNullOrWhiteSpace(description))
			{
				<MudItem>
					<MudTextM3 Align="Align.Center" Class="overflow-auto" Style="max-height: 72px;">
						<MudHighlighter Text="@description" HighlightedText="@modSearchText" />
					</MudTextM3>
				</MudItem>
				<MudFlexBreak />
			}
			@if (selectedModKey.Url is { } url)
			{
				<MudItem>
					<MudLink Href="@url.ToString()">
						<MudHighlighter Text="@url.ToString()" HighlightedText="@modSearchText" />
					</MudLink>
				</MudItem>
			}
			<MudFlexBreak />
			@if (creators.Length is > 0)
			{
				<MudItem>
					<MudStack Row Spacing="0">
						@foreach (var creator in creators)
						{
							<MudChip T="string" Text="@creator" Icon="@MaterialDesignIcons.Normal.Account" Color="Color.Primary" />
						}
					</MudStack>
				</MudItem>
				<MudFlexBreak />
			}
			<MudItem>
				<MudGrid Justify="Justify.Center" Spacing="2" Class="align-center">
                    <MudItem>
                        <MudTooltip Arrow Text="@StringLocalizer["CatalogDisplay_AskForHelp_Tip", selectedModKey.Name]" Color="Color.Info">
                            <MudChip T="string" Class="ma-0" Color="Color.Info" Icon="@MaterialDesignIcons.Normal.FaceAgent" Label="true" OnClick="@(() => DialogService.ShowAskForHelpDialogAsync(Logger, PublicCatalogs, forCreators: creators, forManifestHashHex: hashHex))">
                                <ChildContent>
                                    @MarkupLocalizer[nameof(AppText.CatalogDisplay_AskForHelp)]
                                </ChildContent>
                            </MudChip>
                        </MudTooltip>
                    </MudItem>
					@foreach (var requiredPackCode in requiredPackCodes)
					{
                        <MudItem>
                            <MudTooltip Arrow Text="@(StringLocalizer[installedPackCodes.Contains(requiredPackCode) ? "CatalogDisplay_RequiredPack_Installed_Tip" : "CatalogDisplay_RequiredPack_NotInstalled_Tip", selectedModKey.Name, (PublicCatalogs.PackCatalog?.TryGetValue(requiredPackCode, out var packDescription) ?? false) ? packDescription.EnglishName : requiredPackCode])" Color="@(installedPackCodes.Contains(requiredPackCode) ? Color.Success : Color.Error)">
                                <MudChip T="string" Class="ma-0" Color="@(installedPackCodes.Contains(requiredPackCode) ? Color.Success : Color.Error)" Label="true" OnClick="@(() => SmartSimObserver.HelpWithPackPurchaseAsync(requiredPackCode, DialogService, creators, selectedMod.Select(mod => mod.Manifest.ElectronicArtsPromoCode).FirstOrDefault(pc => pc is not null)))">
                                    <AvatarContent>
                                        <MudAvatar>
                                            <MudImage Src="@Catalog.PackIcons[requiredPackCode]" />
                                        </MudAvatar>
                                    </AvatarContent>
                                    <ChildContent>@((PublicCatalogs.PackCatalog?.TryGetValue(requiredPackCode, out var packDescription) ?? false) ? packDescription.EnglishName : requiredPackCode)</ChildContent>
                                </MudChip>
                            </MudTooltip>
                        </MudItem>
					}
                    @foreach (var recommendPack in recommendPacks)
					{
                        <MudItem>
                            <MudTooltip Arrow Color="Color.Primary">
                                <ChildContent>
                                    <MudChip T="string" Class="ma-0" Color="Color.Info" Label="true" OnClick="@(() => SmartSimObserver.HelpWithPackPurchaseAsync(recommendPack.PackCode, DialogService, creators, selectedMod.Select(mod => mod.Manifest.ElectronicArtsPromoCode).FirstOrDefault(pc => pc is not null)))">
                                        <AvatarContent>
                                            <MudAvatar>
                                                <MudImage Src="@Catalog.PackIcons[recommendPack.PackCode]" />
                                            </MudAvatar>
                                        </AvatarContent>
                                        <ChildContent>@((PublicCatalogs.PackCatalog?.TryGetValue(recommendPack.PackCode, out var packDescription) ?? false) ? packDescription.EnglishName : recommendPack.PackCode)</ChildContent>
                                    </MudChip>
                                </ChildContent>
                                <TooltipContent>
                                    @if (string.IsNullOrWhiteSpace(recommendPack.Reason))
                                    {
                                        <MudTextM3 Typo="TypoM3.Label" Align="Align.Justify">
                                            @MarkupLocalizer[installedPackCodes.Contains(recommendPack.PackCode) ? nameof(AppText.CatalogDisplay_RecommendedPack_Tip_Installed) : nameof(AppText.CatalogDisplay_RecommendedPack_Tip), selectedModKey.Name, (PublicCatalogs.PackCatalog?.TryGetValue(recommendPack.PackCode, out var packDescription) ?? false) ? packDescription.EnglishName : recommendPack.PackCode]
                                        </MudTextM3>
                                    }
                                    else
                                    {
                                        <MudStack Spacing="4">
                                            <MudTextM3 Typo="TypoM3.Label" Align="Align.Justify">
                                                @MarkupLocalizer[installedPackCodes.Contains(recommendPack.PackCode) ? nameof(AppText.CatalogDisplay_RecommendedPack_Tip_InstalledCreatorReason) : nameof(AppText.CatalogDisplay_RecommendedPack_Tip_CreatorReason), creators.Humanize(), (PublicCatalogs.PackCatalog?.TryGetValue(recommendPack.PackCode, out var packDescription) ?? false) ? packDescription.EnglishName : recommendPack.PackCode, selectedModKey.Name]
                                            </MudTextM3>
                                            @foreach (var paragraph in recommendPack.Reason.Split('\n', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries))
                                            {
                                                <MudTextM3 Typo="TypoM3.Label" Align="Align.Justify">
                                                    @paragraph
                                                </MudTextM3>
                                            }
                                        </MudStack>
                                    }
                                </TooltipContent>
                            </MudTooltip>
                        </MudItem>
					}
					@foreach (var incompatiblePackCode in incompatiblePackCodes)
					{
                        <MudItem>
                            <MudTooltip Arrow Text="@(StringLocalizer[installedPackCodes.Contains(incompatiblePackCode) ? "CatalogDisplay_IncompatiblePack_Installed_Tip" : "CatalogDisplay_IncompatiblePack_NotInstalled_Tip", selectedModKey.Name, incompatiblePackCode])" Color="@(!installedPackCodes.Contains(incompatiblePackCode) ? Color.Success : Color.Error)">
                                <MudChip T="string" Class="ma-0" Color="@(!installedPackCodes.Contains(incompatiblePackCode) ? Color.Success : Color.Error)" Label="true">
                                    <AvatarContent>
                                        <MudAvatar>
                                            <MudImage Src="@Catalog.PackIcons[incompatiblePackCode]" />
                                        </MudAvatar>
                                    </AvatarContent>
                                    <ChildContent>@((PublicCatalogs.PackCatalog?.TryGetValue(incompatiblePackCode, out var packDescription) ?? false) ? packDescription.EnglishName : incompatiblePackCode)</ChildContent>
                                </MudChip>
                            </MudTooltip>
                        </MudItem>
					}
				</MudGrid>
			</MudItem>
			<MudFlexBreak />
			<MudItem xs="12">
				<CatalogDisplayModDetailsFiles CatalogModValues="@selectedMod" />
			</MudItem>
			@if (dependencies.Length is > 0)
			{
				<MudItem xs="12">
					<CatalogDisplayModDetailsDependencies Dependencies="@dependencies" />
				</MudItem>
			}
			@if (indexableDependents.Length is > 0)
			{
				<MudItem xs="12">
					<CatalogDisplayModDetailsDependents Dependents="@indexableDependents" />
				</MudItem>
			}
		}
	</MudGrid>
</div>
