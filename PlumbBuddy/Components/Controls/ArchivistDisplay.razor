@inherits ReactiveComponentBase
@inject IArchivist Archivist
@inject IDialogService DialogService
@inject ILogger<ArchivistDisplay> Logger
@inject IMarkupLocalizer<AppText> MarkupLocalizer
@inject IPlatformFunctions PlatformFunctions
@inject ISettings Settings
@inject IUpdateManager UpdateManager

<MudGrid Class="align-center">
	<MudItem xs="12">
		<MudStack Row AlignItems="AlignItems.Center" Spacing="6">
			<MudPaper Outlined Class="px-4 py-2">
				<MudStack Row Justify="Justify.Center" AlignItems="AlignItems.Center">
					<MudTooltip Color="Color.Secondary" Text="@(AppText.Archivist_Enabled_Tip)">
						<MudSwitchM3 @bind-Value="@Binding(() => Settings.ArchivistEnabled).Value" Color="Color.Secondary" ThumbIcon="@MaterialDesignIcons.Normal.Archive" ThumbOffIcon="@MaterialDesignIcons.Normal.ArchiveOff" />
					</MudTooltip>
					<MudTooltip Color="Color.Secondary" Text="@(AppText.Archivist_AutoIngestSaves_Tip)">
						<MudSwitchM3 @bind-Value="@Binding(() => Settings.ArchivistAutoIngestSaves).Value" Color="Color.Secondary" ThumbIcon="@MaterialDesignIcons.Normal.Autorenew" ThumbOffIcon="@MaterialDesignIcons.Normal.AutorenewOff" Disabled="@(!Observed(() => Settings.ArchivistEnabled))" />
					</MudTooltip>
					<MudTooltip Arrow Color="Color.Secondary" Text="@(AppText.Archivist_ScanFolderForSaves_Tip)">
						<MudIconButton Variant="Variant.Filled" Color="Color.Secondary" Icon="@MaterialDesignIcons.Normal.FolderSearch" Disabled="@(!Observed(() => Settings.ArchivistEnabled))" OnClick="BrowseForFolderToScanAsync" />
					</MudTooltip>
					@if (!Observed(() => Archivist.CanSafelyUpdateSaveGameData))
					{
						<MudTooltip Arrow Color="Color.Secondary" Text="@(AppText.Archivist_CheckForUpdate_Tip)">
							<MudIconButton Variant="Variant.Filled" Color="Color.Secondary" Icon="@MaterialDesignIcons.Normal.Update" OnClick="CheckForUpdateAsync" />
						</MudTooltip>
					}
				</MudStack>
			</MudPaper>
			<MudStack Row Justify="Justify.Center" AlignItems="AlignItems.Center" Class="flex-grow-1">
				@if (Observed(() => Archivist.State) is ArchivistState.AwaitingModCataloging)
				{
					<MudTooltip Color="Color.Secondary" Text="@(AppText.Archivist_Status_WaitingForMDC_Tip)">
						<MudBadge Overlap Icon="@MaterialDesignIcons.Normal.PackageVariant" Origin="Origin.TopRight" Color="Color.Primary">
							<MudIcon Icon="@MaterialDesignIcons.Normal.PauseOctagon" Color="Color.Secondary" Style="font-size: 40px;" />
						</MudBadge>
					</MudTooltip>
				}
				else if (Observed(() => Archivist.State) is ArchivistState.Ingesting)
				{
					<MudProgressLinear Color="Color.Secondary" Indeterminate Rounded Size="Size.Large" />
				}
				else if (Observed(() => Settings.ArchivistEnabled))
				{
					if (Observed(() => Settings.ArchivistAutoIngestSaves))
					{
						<MudTooltip Color="Color.Secondary" Text="@(AppText.Archivist_Status_AutoIngestFinished_Tip)">
							<MudIcon Icon="@MaterialDesignIcons.Normal.ContentSaveCheck" Color="Color.Secondary" Style="font-size: 40px;" />
						</MudTooltip>
					}
					else
					{
						<MudTooltip Color="Color.Secondary" Text="@(AppText.Archivist_Status_Finished_Tip)">
							<MudIcon Icon="@MaterialDesignIcons.Normal.ContentSave" Color="Color.Secondary" Style="font-size: 40px;" />
						</MudTooltip>
					}
				}
				else
				{
					<MudTooltip Color="Color.Secondary" Text="@(AppText.Archivist_Status_Offline_Tip)">
						<MudIcon Icon="@MaterialDesignIcons.Normal.ContentSaveOff" Style="font-size: 40px; opacity: .35;" />
					</MudTooltip>
				}
			</MudStack>
			<MudTextField @bind-Value="@ChroniclesSearchText" Variant="Variant.Filled" Label="@(AppText.Archivist_SearchChronicles_Label)" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" ShrinkLabel Immediate Clearable DebounceInterval="250" Class="flex-grow-0" Style="background-color: var(--mud-palette-surface);" />
		</MudStack>
	</MudItem>
	<MudItem xs="3">
		<div class="chronicle-list overflow-y-auto rounded mud-paper-outlined">
			<MudList T="Chronicle" @bind-SelectedValue="@(Binding(() => Archivist.SelectedChronicle).Value)" Color="Color.Secondary">
				@foreach (var chronicle in ObservedCollection(() => Archivist.Chronicles).Where(IncludeChronicle).OrderByDescending(c => c.Snapshots.Select(s => s.LastWriteTime).Max()))
				{
					<MudListItem T="Chronicle" Value="@chronicle" Text="@Observed(() => chronicle.Name)" SecondaryText="@(string.Format(AppText.Archivist_Chronicle_SecondaryText_Format, Observed(() => chronicle.LatestLastWriteTime), AppText.Archivist_Chronicle_Snapshot.ToQuantity(ObservedCollection(() => chronicle.Snapshots).Count)))" Icon="@MaterialDesignIcons.Normal.Altimeter" IconColor="Color.Secondary" />
				}
			</MudList>
		</div>
	</MudItem>
	<MudItem xs="9">
		<div class="chronicle-details overflow-auto rounded mud-paper-outlined pa-4">
			@if (Archivist.SelectedChronicle is { } selectedChronicle)
			{
				if (Observed(() => Archivist.State) is ArchivistState.Ingesting && isEditingChronicle)
				{
					isEditingChronicle = false;
				}
				<div class="d-flex gap-4 align-start">
					@if (!isEditingChronicle && Observed(() => selectedChronicle.Thumbnail) is { Length: > 0 } thumbnail)
					{
						<MudImage Src="@($"data:image/png;base64,{Convert.ToBase64String(thumbnail.ToArray())}")" Width="180" Height="120" ObjectFit="ObjectFit.Contain" ObjectPosition="ObjectPosition.Center" Class="flex-shrink-1" />
					}
					<MudStack Spacing="1" Class="flex-grow-1">
						@if (isEditingChronicle)
						{
							<MudPaper>
								<MudAlert Severity="Severity.Warning">
									@MarkupLocalizer[nameof(AppText.Archivist_Editor_Warning)]
								</MudAlert>
							</MudPaper>
							<MudTextField @bind-Value="@Binding(() => selectedChronicle.Name).Value" Variant="Variant.Filled" Label="@(AppText.Common_Name)" AdornmentIcon="@MaterialDesignIcons.Normal.Label" Adornment="Adornment.Start" DebounceInterval="250" />
							<MudTextField @bind-Value="@Binding(() => selectedChronicle.Notes).Value" Variant="Variant.Filled" Label="@(AppText.Common_Name)" Lines="5" AdornmentIcon="@MaterialDesignIcons.Normal.Note" Adornment="Adornment.Start" Clearable DebounceInterval="250" />
							<MudTextField @bind-Value="@Binding(() => selectedChronicle.GameNameOverride).Value" Variant="Variant.Filled" Label="@(AppText.Archivist_Chronicle_GameNameOverride_Label)" AdornmentIcon="@MaterialDesignIcons.Normal.Rename" Adornment="Adornment.Start" Clearable HelperText="@(AppText.Archivist_Chronicle_GameNameOverride_HelperText)" DebounceInterval="250" />
							<MudField Label="@(AppText.Archivist_Chronicle_CustomThumbnail_Label)" Variant="Variant.Filled" Adornment="Adornment.Start" AdornmentIcon="@MaterialDesignIcons.Normal.ImageEdit">
								<MudStack Spacing="1">
									@if (Observed(() => selectedChronicle.Thumbnail) is { Length: > 0 } thumbnail)
									{
										<MudImage Src="@($"data:image/png;base64,{Convert.ToBase64String(thumbnail.ToArray())}")" Width="180" Height="120" ObjectFit="ObjectFit.Contain" ObjectPosition="ObjectPosition.Center" />
									}
									<MudStack Row>
										<MudButton OnClick="@(new Func<Task>(() => selectedChronicle.BrowseForCustomThumbnailAsync(DialogService)))" StartIcon="@MaterialDesignIcons.Normal.FolderOpen" Variant="Variant.Filled">
											Browse...
										</MudButton>
										@if (Observed(() => selectedChronicle.Thumbnail) is { Length: > 0 })
										{
											<MudIconButton Icon="@MaterialDesignIcons.Normal.Eraser" OnClick="selectedChronicle.ClearThumbnailAsync" Variant="Variant.Filled" />
										}
									</MudStack>
								</MudStack>
							</MudField>
						}
						else
						{
							<MudTextM3 Typo="TypoM3.Headline" Align="Align.Center">
								@(Observed(() => selectedChronicle.Name))
							</MudTextM3>
							<MudGrid Justify="Justify.Center" Spacing="0">
								<MudItem>
									<MudTooltip Arrow Text="@(AppText.Archivist_Chronicle_DatabaseSize_Tip)">
										<MudChip Icon="@MaterialDesignIcons.Normal.Harddisk" Value="@(ByteSize.FromBytes(Observed(() => selectedChronicle.DatabaseSize)).Humanize())" />
									</MudTooltip>
								</MudItem>
								<MudItem>
									<MudTooltip Arrow Text="@(AppText.Archivist_Chronicle_FirstSnapshot_Tip)">
										<MudChip Icon="@MaterialDesignIcons.Normal.CalendarStart" Value="@(Observed(() => selectedChronicle.EarliestLastWriteTime).ToString("g"))" />
									</MudTooltip>
								</MudItem>
								<MudItem>
									<MudTooltip Arrow Text="@(AppText.Archivist_Chronicle_LastSnapshot_Tip)">
										<MudChip Icon="@MaterialDesignIcons.Normal.CalendarEnd" Value="@(Observed(() => selectedChronicle.LatestLastWriteTime).ToString("g"))" />
									</MudTooltip>
								</MudItem>
								<MudItem>
									<MudTooltip Arrow Text="@(AppText.Archivist_Chronicle_Snapshots_Tip)">
										<MudChip Icon="@MaterialDesignIcons.Normal.Timeline" Value="@(AppText.Archivist_Chronicle_Snapshot.ToQuantity(ObservedCollection(() => selectedChronicle.Snapshots).Count))" />
									</MudTooltip>
								</MudItem>
							</MudGrid>
							@if (Observed(() => selectedChronicle.Notes) is { } notes && !string.IsNullOrWhiteSpace(notes))
							{
								<MudDivider />
								<MudMarkdown Value="@notes" />
							}
						}
						@if (Observed(() => selectedChronicle.BasedOnSnapshot) is { } basedOnSnapshot)
						{
							<MudField Adornment="Adornment.Start" AdornmentIcon="@MaterialDesignIcons.Normal.CallSplit" Label="@(AppText.Archivist_Chronicle_BasedOn_Label)" Variant="Variant.Filled">
								<MudBreadcrumbs Items="@(new List<BreadcrumbItem> { new BreadcrumbItem(Observed(() => basedOnSnapshot.Chronicle.Name), "chronicle", icon: MaterialDesignIcons.Normal.Altimeter), new BreadcrumbItem($"{Observed(() => basedOnSnapshot.Label)} ({Observed(() => basedOnSnapshot.LastWriteTime):g})", "snapshot", icon: MaterialDesignIcons.Normal.Timeline) })" Class="pa-0">
									<ItemTemplate>
										<MudTooltip Arrow Text="@(context.Href == "snapshot" ? AppText.Archivist_Chronicle_BasedOn_Snapshot_Tip : AppText.Archivist_Chronicle_BasedOn_Branch_Tip)">
											<MudButton Variant="Variant.Text" StartIcon="@(context.Icon)" OnClick="@(() => NavigateToBasis(context.Href))">
												@context.Text
											</MudButton>
										</MudTooltip>
									</ItemTemplate>
								</MudBreadcrumbs>
							</MudField>
						}
					</MudStack>
					<MudStack Spacing="0">
						<MudTooltip Arrow Placement="Placement.Left" Text="@(AppText.Archivist_Chronicle_Edit_Tip)">
							<MudToggleIconButton @bind-Toggled="@isEditingChronicle" Icon="@MaterialDesignIcons.Normal.Pencil" ToggledIcon="@MaterialDesignIcons.Normal.Check" Disabled="@(Observed(() => Archivist.State) is ArchivistState.Ingesting)" />
						</MudTooltip>
						<MudTooltip Arrow Color="Color.Secondary" Placement="Placement.Left" Text="@(AppText.Archivist_Chronicle_ReapplyCustomizations_Tip)">
							<MudIconButton Icon="@MaterialDesignIcons.Normal.FileRefresh" Color="Color.Secondary" OnClick="@(() => ReapplyEnhancementsAsync(selectedChronicle))" Disabled="@(Observed(() => Archivist.State) is ArchivistState.Ingesting)" />
						</MudTooltip>
						<MudTooltip Arrow Color="Color.Warning" Placement="Placement.Left" Text="@(AppText.Archivist_Chronicle_ShowDatabase_Tip)">
							<MudIconButton Color="Color.Warning" Icon="@MaterialDesignIcons.Normal.DatabaseSearch" OnClick="@(new Func<MouseEventArgs, Task>(e => ShowChronicleDatabaseAsync(selectedChronicle)))" />
						</MudTooltip>
					</MudStack>
				</div>
				<MudGrid Justify="Justify.Center" Spacing="1">
					<MudItem xs="12">
						<MudTable T="Snapshot" Items="@(ObservedCollection(() => selectedChronicle.Snapshots).OrderByDescending(s => s.LastWriteTime))" Breakpoint="Breakpoint.Sm" Dense Filter="IncludeSnapshot" Class="mt-2">
							<ToolBarContent>
								<MudTextM3 Typo="TypoM3.Title" Style="width: 80%;">
									@MarkupLocalizer[nameof(AppText.Archivist_Chronicle_Snapshots_Heading)]
								</MudTextM3>
								<MudSpacer />
								<MudTextField @bind-Value="@snapshotsTextSearch" Placeholder="@(AppText.Common_Search)" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Immediate Clearable DebounceInterval="250" Class="mt-0" />
							</ToolBarContent>
							<RowTemplate>
								<MudTd>
									<MudStack Row AlignItems="AlignItems.Center">
										<MudTooltip Arrow Text="@(AppText.Archivist_Snapshot_ViewDetails_Tip)">
											<MudToggleIconButton @bind-Toggled="context.ShowDetails" Icon="@MaterialDesignIcons.Normal.ChevronRight" ToggledIcon="@MaterialDesignIcons.Normal.ChevronDown" Size="Size.Small" />
										</MudTooltip>
										<MudIcon Icon="@MaterialDesignIcons.Normal.Timeline" Size="Size.Small" />
										<MudTextM3>
											<MudHighlighter Text="@(Observed(() => context.LastWriteTime).ToString("g"))" HighlightedText="@snapshotsTextSearch" />
										</MudTextM3>
									</MudStack>
								</MudTd>
								<MudTd DataLabel="Label">
									<MudTextM3>
										<MudHighlighter Text="@(Observed(() => context.Label))" HighlightedText="@snapshotsTextSearch" />
									</MudTextM3>
								</MudTd>
								<MudTd>
									<MudStack Row Justify="Justify.FlexEnd" AlignItems="AlignItems.Center" Spacing="1">
										@if (context.WasLive)
										{
											<MudTooltip Arrow Text="@(AppText.Archivist_Snapshot_Tag_Live_Tip)">
												<MudChip T="object" Size="Size.Small" Icon="@MaterialDesignIcons.Normal.GamepadSquare" Class="ma-0" OnClick="@(new Action<MouseEventArgs>(e => snapshotsTextSearch = AppText.Archivist_Snapshot_Tag_Live))">
													<MudHighlighter Text="@(AppText.Archivist_Snapshot_Tag_Live)" HighlightedText="@snapshotsTextSearch" />
												</MudChip>
											</MudTooltip>
										}
										@if (context.ActiveHouseholdName is { } activeHouseholdName)
										{
											<MudTooltip Arrow Text="@(AppText.Archivist_Snapshot_Tag_ActiveHousehold_Tip)">
												<MudChip T="object" Size="Size.Small" Icon="@MaterialDesignIcons.Normal.Home" Class="ma-0" OnClick="@(new Action<MouseEventArgs>(e => snapshotsTextSearch = activeHouseholdName))">
													<MudHighlighter Text="@activeHouseholdName" HighlightedText="@snapshotsTextSearch" />
												</MudChip>
											</MudTooltip>
										}
										@if (context.LastPlayedLotName is { } lastPlayedLotName)
										{
											<MudTooltip Arrow Text="@(AppText.Archivist_Snapshot_Tag_Lot_Tip)">
												<MudChip T="object" Size="Size.Small" Icon="@MaterialDesignIcons.Normal.MapMarker" Class="ma-0" OnClick="@(new Action<MouseEventArgs>(e => snapshotsTextSearch = lastPlayedLotName))">
													<MudHighlighter Text="@lastPlayedLotName" HighlightedText="@snapshotsTextSearch" />
												</MudChip>
											</MudTooltip>
										}
										@if (context.LastPlayedWorldName is { } lastPlayedWorldName)
										{
											<MudTooltip Arrow Text="@(AppText.Archivist_Snapshot_Tag_World_Tip)">
												<MudChip T="object" Size="Size.Small" Icon="@MaterialDesignIcons.Normal.Map" Class="ma-0" OnClick="@(new Action<MouseEventArgs>(e => snapshotsTextSearch = lastPlayedWorldName))">
													<MudHighlighter Text="@lastPlayedWorldName" HighlightedText="@snapshotsTextSearch" />
												</MudChip>
											</MudTooltip>
										}
										<MudTooltip Arrow Text="@(AppText.Archivist_Snapshot_Restore_Tip)" Color="Color.Secondary">
											<MudIconButton Icon="@MaterialDesignIcons.Normal.FileRestore" Color="Color.Secondary" Size="Size.Small" OnClick="@(new Func<MouseEventArgs, Task>(e => RestoreSavePackageAsync(context)))" Disabled="@(Observed(() => Archivist.State) is ArchivistState.Ingesting)" />
										</MudTooltip>
										<MudTooltip Arrow Text="@(AppText.Archivist_Snapshot_Branch_Tip)" Color="Color.Secondary">
											<MudIconButton Icon="@MaterialDesignIcons.Normal.CallSplit" Color="Color.Secondary" Size="Size.Small" OnClick="@(new Func<MouseEventArgs, Task>(e => CreateBranchAsync(context)))" Disabled="@(Observed(() => Archivist.State) is ArchivistState.Ingesting || !Observed(() => Archivist.CanSafelyUpdateSaveGameData))" />
										</MudTooltip>
										<MudTooltip Arrow Text="@(AppText.Archivist_Snapshot_Export_Tip)" Color="Color.Secondary">
											<MudIconButton Icon="@MaterialDesignIcons.Normal.FileExport" Color="Color.Secondary" Size="Size.Small" OnClick="@(new Func<MouseEventArgs, Task>(e => ExportSavePackageAsync(context)))" />
										</MudTooltip>
									</MudStack>
								</MudTd>
							</RowTemplate>
							<ChildRowContent>
								@if (context.ShowDetails)
								{
									<MudTr>
										<td colspan="3" class="relative py-4">
											<div class="d-flex gap-4 align-start px-4">
												@if (Observed(() => context.ThumbnailUri) is { Length: > 0 } thumbnailUri)
												{
													<MudImage Src="@thumbnailUri" Width="180" Height="120" ObjectFit="ObjectFit.Contain" ObjectPosition="ObjectPosition.Center" />
												}
												<MudStack Spacing="1" Class="flex-grow-1">
													@if (context.IsEditing)
													{
														<MudPaper>
															<MudAlert Severity="Severity.Warning">
																@MarkupLocalizer[nameof(AppText.Archivist_Editor_Warning)]
															</MudAlert>
														</MudPaper>
														<MudTextField @bind-Value="@Binding(() => context.Label).Value" Variant="Variant.Filled" Label="@(AppText.Common_Label)" AdornmentIcon="@MaterialDesignIcons.Normal.Label" Adornment="Adornment.Start" DebounceInterval="250" />
														<MudTextField @bind-Value="@Binding(() => context.Notes).Value" Variant="Variant.Filled" Label="@(AppText.Common_Notes)" Lines="5" AdornmentIcon="@MaterialDesignIcons.Normal.Note" Adornment="Adornment.Start" Clearable DebounceInterval="250" />
													}
													else
													{
														<MudTextM3 Typo="TypoM3.Title" Class="mt-2">
															<MudHighlighter Text="@(Observed(() => context.Label))" HighlightedText="@snapshotsTextSearch" />
														</MudTextM3>
														@if (Observed(() => context.Notes) is { } notes && !string.IsNullOrWhiteSpace(notes))
														{
															<div class="manual-markdown">
																<MudHighlighter Text="@(Markdown.Parse(notes).ToHtml())" HighlightedText="@snapshotsTextSearch" Markup />
															</div>
														}
													}
													<MudStack Row>
														@if (Observed(() => context.ThumbnailUri) is { Length: > 0 })
														{
															<MudButton Variant="Variant.Filled" StartIcon="@MaterialDesignIcons.Outline.ImageCheck" Disabled="@(Observed(() => Archivist.State) is ArchivistState.Ingesting)" OnClick="@(new Func<MouseEventArgs, Task>(e => context.UseThumbnailForChronicleAsync(DialogService)))">
																@MarkupLocalizer[nameof(AppText.Archivist_Snapshot_UseThumbnailForChronicle_Label)]
															</MudButton>
														}
														@if (context.WasLive)
														{
															<MudButton Variant="Variant.Filled" StartIcon="@MaterialDesignIcons.Outline.InvoiceExport" OnClick="@(new Func<MouseEventArgs, Task>(e => ExportModListAsync(context)))">
																@MarkupLocalizer[nameof(AppText.Archivist_Snapshot_ExportModList_Label)]
															</MudButton>
														}
													</MudStack>
												</MudStack>
												<MudStack Spacing="0">
													<MudTooltip Arrow Placement="Placement.Left" Text="@(AppText.Archivist_Snapshot_Edit_Tip)">
														<MudToggleIconButton @bind-Toggled="@context.IsEditing" Icon="@MaterialDesignIcons.Normal.Pencil" ToggledIcon="@MaterialDesignIcons.Normal.Check" Disabled="@(Observed(() => Archivist.State) is ArchivistState.Ingesting)" />
													</MudTooltip>
													<MudTooltip Arrow Placement="Placement.Left" Text="@(AppText.Archivist_Snapshot_FindInSavesDirectory_Tip)">
														<MudIconButton Icon="@MaterialDesignIcons.Normal.FileFind" OnClick="@(new Func<MouseEventArgs, Task>(e => ShowSavePackageInSavesDirectoryAsync(context)))" />
													</MudTooltip>
													<MudTooltip Arrow Color="Color.Warning" Placement="Placement.Left" Text="@(AppText.Archivist_Snapshot_DeletePrior_Tip)">
														<MudIconButton Icon="@MaterialDesignIcons.Normal.TimelineRemove" Color="Color.Warning" OnClick="@(new Func<MouseEventArgs, Task>(e => DeletePreviousSnapshotsAsync(context)))" Disabled="@(Observed(() => Archivist.State) is ArchivistState.Ingesting)" />
													</MudTooltip>
												</MudStack>
											</div>
										</td>
									</MudTr>
								}
							</ChildRowContent>
							<PagerContent>
								<MudTablePager />
							</PagerContent>
						</MudTable>
					</MudItem>
				</MudGrid>
			}
		</div>
	</MudItem>
</MudGrid>
