@inherits ReactiveComponentBase
@inject IArchivist Archivist
@inject IDialogService DialogService
@inject ILogger<ArchivistDisplay> Logger
@inject IMarkupLocalizer<AppText> MarkupLocalizer
@inject IPlatformFunctions PlatformFunctions
@inject ISettings Settings
@inject IStringLocalizer<AppText> StringLocalizer
@inject IUpdateManager UpdateManager

<MudGrid Class="align-center">
	<MudItem xs="12">
		<MudStack Row AlignItems="AlignItems.Center" Spacing="6">
			<MudPaper Outlined Class="px-4 py-2">
				<MudStack Row Justify="Justify.Center" AlignItems="AlignItems.Center">
					<MudTooltip Color="Color.Secondary" Text="If this switch is flipped, I will connect to the Archive folder you have configured in Settings.">
						<MudSwitchM3 @bind-Value="@Binding(() => Settings.ArchivistEnabled).Value" Color="Color.Secondary" ThumbIcon="@MaterialDesignIcons.Normal.Archive" ThumbOffIcon="@MaterialDesignIcons.Normal.ArchiveOff" />
					</MudTooltip>
					<MudTooltip Color="Color.Secondary" Text="If I'm enabled and this switch is flipped, I will secure every save your game writes, whether through normal game operation or mod features like MC Command Center Auto Save, in my library from which you can review them, restore them, and set your own customizations for them.">
						<MudSwitchM3 @bind-Value="@Binding(() => Settings.ArchivistAutoIngestSaves).Value" Color="Color.Secondary" ThumbIcon="@MaterialDesignIcons.Normal.Autorenew" ThumbOffIcon="@MaterialDesignIcons.Normal.AutorenewOff" Disabled="@(!Observed(() => Settings.ArchivistEnabled))" />
					</MudTooltip>
					<MudTooltip Arrow Color="Color.Secondary" Text="Scan a Folder for Saves">
						<MudIconButton Variant="Variant.Filled" Color="Color.Secondary" Icon="@MaterialDesignIcons.Normal.FolderSearch" Disabled="@(!Observed(() => Settings.ArchivistEnabled))" OnClick="BrowseForFolderToScanAsync" />
					</MudTooltip>
					@if (!Observed(() => Archivist.CanSafelyUpdateSaveGameData))
					{
						<MudTooltip Arrow Color="Color.Secondary" Text="I'm not currently up to date with your version of The Sims 4, so it's not safe for me to alter the meta data in your save games. This means I can't update their names or branch chronicles. You can click here to check if there's an update out for me that will get me caught up.">
							<MudIconButton Variant="Variant.Filled" Color="Color.Secondary" Icon="@MaterialDesignIcons.Normal.Update" OnClick="CheckForUpdateAsync" />
						</MudTooltip>
					}
				</MudStack>
			</MudPaper>
			<MudStack Row Justify="Justify.Center" AlignItems="AlignItems.Center" Class="flex-grow-1">
				@if (Observed(() => Archivist.State) is ArchivistState.AwaitingModCataloging)
				{
					<MudTooltip Color="Color.Secondary" Text="Since I want to correctly capture your mod list in snapshots, I'm waiting for mod cataloging to finish.">
						<MudBadge Overlap Icon="@MaterialDesignIcons.Normal.PackageVariant" Origin="Origin.TopRight" Color="Color.Primary">
							<MudIcon Icon="@MaterialDesignIcons.Normal.PauseOctagon" Color="Color.Secondary" Style="font-size: 40px;" />
						</MudBadge>
					</MudTooltip>
				}
				else if (Observed(() => Archivist.State) is ArchivistState.Ingesting)
				{
					<MudProgressLinear Color="Color.Secondary" Indeterminate Rounded Size="Size.Large" />
				}
				else if (Observed(() => Settings.ArchivistEnabled))
				{
					if (Observed(() => Settings.ArchivistAutoIngestSaves))
					{
						<MudTooltip Color="Color.Secondary" Text="I'm done archiving your save files.">
							<MudIcon Icon="@MaterialDesignIcons.Normal.ContentSaveCheck" Color="Color.Secondary" Style="font-size: 40px;" />
						</MudTooltip>
					}
					else
					{
						<MudTooltip Color="Color.Secondary" Text="I am connected to your archive.">
							<MudIcon Icon="@MaterialDesignIcons.Normal.ContentSave" Color="Color.Secondary" Style="font-size: 40px;" />
						</MudTooltip>
					}
				}
				else
				{
					<MudTooltip Color="Color.Secondary" Text="I'm disconnected from your archive.">
						<MudIcon Icon="@MaterialDesignIcons.Normal.ContentSaveOff" Style="font-size: 40px; opacity: .35;" />
					</MudTooltip>
				}
			</MudStack>
			<MudTextField @bind-Value="@ChroniclesSearchText" Variant="Variant.Filled" Label="Search Chronicles" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" ShrinkLabel Immediate Clearable DebounceInterval="250" Class="flex-grow-0" Style="background-color: var(--mud-palette-surface);" />
		</MudStack>
	</MudItem>
	<MudItem xs="4">
		<div class="chronicle-list overflow-y-auto rounded mud-paper-outlined">
			<MudList T="Chronicle" @bind-SelectedValue="@(Binding(() => Archivist.SelectedChronicle).Value)" Color="Color.Secondary">
				@foreach (var chronicle in ObservedCollection(() => Archivist.Chronicles).Where(IncludeChronicle).OrderByDescending(c => c.Snapshots.Select(s => s.LastWriteTime).Max()))
				{
					<MudListItem T="Chronicle" Value="@chronicle" Text="@Observed(() => chronicle.Name)" SecondaryText="@($"{Observed(() => chronicle.LatestLastWriteTime):g} - {"snapshot".ToQuantity(ObservedCollection(() => chronicle.Snapshots).Count)}")" Icon="@MaterialDesignIcons.Normal.Altimeter" IconColor="Color.Secondary" />
				}
			</MudList>
		</div>
	</MudItem>
	<MudItem xs="8">
		<div class="chronicle-details overflow-auto rounded mud-paper-outlined pa-4">
			@if (Archivist.SelectedChronicle is { } selectedChronicle)
			{
				if (Observed(() => Archivist.State) is ArchivistState.Ingesting && isEditingChronicle)
				{
					isEditingChronicle = false;
				}
				<div class="d-flex gap-4 align-start">
					@if (!isEditingChronicle && Observed(() => selectedChronicle.Thumbnail) is { Length: > 0 } thumbnail)
					{
						<MudImage Src="@($"data:image/png;base64,{Convert.ToBase64String(thumbnail.ToArray())}")" Width="180" Height="120" ObjectFit="ObjectFit.Contain" ObjectPosition="ObjectPosition.Center" Class="flex-shrink-1" />
					}
					<MudStack Spacing="1" Class="flex-grow-1">
						@if (isEditingChronicle)
						{
							<MudPaper>
								<MudAlert Severity="Severity.Warning">
									Changes you make here take effect immediately, whether or not you've clicked the check.
								</MudAlert>
							</MudPaper>
							<MudTextField @bind-Value="@Binding(() => selectedChronicle.Name).Value" Variant="Variant.Filled" Label="Name" AdornmentIcon="@MaterialDesignIcons.Normal.Label" Adornment="Adornment.Start" DebounceInterval="250" />
							<MudTextField @bind-Value="@Binding(() => selectedChronicle.Notes).Value" Variant="Variant.Filled" Label="Notes" Lines="5" AdornmentIcon="@MaterialDesignIcons.Normal.Note" Adornment="Adornment.Start" Clearable DebounceInterval="250" />
							<MudTextField @bind-Value="@Binding(() => selectedChronicle.GameNameOverride).Value" Variant="Variant.Filled" Label="Game Name Override" AdornmentIcon="@MaterialDesignIcons.Normal.Rename" Adornment="Adornment.Start" Clearable HelperText="I will set the save's game name to whatever you enter here, if you enter something, so that you can easily distinguish this chronicle's saves when loading in The Sims 4." DebounceInterval="250" />
							<MudField Label="Custom Thumbnail" Variant="Variant.Filled" Adornment="Adornment.Start" AdornmentIcon="@MaterialDesignIcons.Normal.ImageEdit">
								<MudStack Spacing="1">
									@if (Observed(() => selectedChronicle.Thumbnail) is { Length: > 0 } thumbnail)
									{
										<MudImage Src="@($"data:image/png;base64,{Convert.ToBase64String(thumbnail.ToArray())}")" Width="180" Height="120" ObjectFit="ObjectFit.Contain" ObjectPosition="ObjectPosition.Center" />
									}
									<MudStack Row>
										<MudButton OnClick="@(new Func<Task>(() => selectedChronicle.BrowseForCustomThumbnailAsync(DialogService)))" StartIcon="@MaterialDesignIcons.Normal.FolderOpen" Variant="Variant.Filled">
											Browse...
										</MudButton>
										@if (Observed(() => selectedChronicle.Thumbnail) is { Length: > 0 })
										{
											<MudIconButton Icon="@MaterialDesignIcons.Normal.Eraser" OnClick="selectedChronicle.ClearThumbnailAsync" Variant="Variant.Filled" />
										}
									</MudStack>
								</MudStack>
							</MudField>
						}
						else
						{
							<MudTextM3 Typo="TypoM3.Headline" Align="Align.Center">
								@(Observed(() => selectedChronicle.Name))
							</MudTextM3>
							<MudGrid Justify="Justify.Center" Spacing="0">
								<MudItem>
									<MudTooltip Arrow Text="This is the amount of space this chronicle is using in your Archive folder.">
										<MudChip Icon="@MaterialDesignIcons.Normal.Harddisk" Value="@(ByteSize.FromBytes(Observed(() => selectedChronicle.DatabaseSize)).Humanize())" />
									</MudTooltip>
								</MudItem>
								<MudItem>
									<MudTooltip Arrow Text="This was when the first snapshot's save was written to your saves folder.">
										<MudChip Icon="@MaterialDesignIcons.Normal.CalendarStart" Value="@(Observed(() => selectedChronicle.EarliestLastWriteTime).ToString("g"))" />
									</MudTooltip>
								</MudItem>
								<MudItem>
									<MudTooltip Arrow Text="This was when the most recent snapshot's save was written to your saves folder.">
										<MudChip Icon="@MaterialDesignIcons.Normal.CalendarEnd" Value="@(Observed(() => selectedChronicle.LatestLastWriteTime).ToString("g"))" />
									</MudTooltip>
								</MudItem>
								<MudItem>
									<MudTooltip Arrow Text="This is how many snapshots this chronicle currently has.">
										<MudChip Icon="@MaterialDesignIcons.Normal.Timeline" Value="@("snapshot".ToQuantity(ObservedCollection(() => selectedChronicle.Snapshots).Count))" />
									</MudTooltip>
								</MudItem>
							</MudGrid>
							@if (Observed(() => selectedChronicle.Notes) is { } notes && !string.IsNullOrWhiteSpace(notes))
							{
								<MudDivider />
								<MudMarkdown Value="@notes" />
							}
						}
						@if (Observed(() => selectedChronicle.BasedOnSnapshot) is { } basedOnSnapshot)
						{
							<MudField Adornment="Adornment.Start" AdornmentIcon="@MaterialDesignIcons.Normal.CallSplit" Label="Based on" Variant="Variant.Filled">
								<MudBreadcrumbs Items="@(new List<BreadcrumbItem> { new BreadcrumbItem(Observed(() => basedOnSnapshot.Chronicle.Name), "chronicle", icon: MaterialDesignIcons.Normal.Altimeter), new BreadcrumbItem($"{Observed(() => basedOnSnapshot.Label)} ({Observed(() => basedOnSnapshot.LastWriteTime):g})", "snapshot", icon: MaterialDesignIcons.Normal.Timeline) })" Class="pa-0">
									<ItemTemplate>
										<MudTooltip Arrow Text="@(context.Href == "snapshot" ? "Navigate to this Snapshot's Chronicle, Search for its Date, and Show its Details" : "Navigate to this Chronicle")">
											<MudButton Variant="Variant.Text" StartIcon="@(context.Icon)" OnClick="@(() => NavigateToBasis(context.Href))">
												@context.Text
											</MudButton>
										</MudTooltip>
									</ItemTemplate>
								</MudBreadcrumbs>
							</MudField>
						}
					</MudStack>
					<MudStack Spacing="0">
						<MudTooltip Arrow Placement="Placement.Left" Text="Edit this Chronicle's Details">
							<MudToggleIconButton @bind-Toggled="@isEditingChronicle" Icon="@MaterialDesignIcons.Normal.Pencil" ToggledIcon="@MaterialDesignIcons.Normal.Check" Disabled="@(Observed(() => Archivist.State) is ArchivistState.Ingesting)" />
						</MudTooltip>
						<MudTooltip Arrow Color="Color.Secondary" Placement="Placement.Left" Text="Reapply Customizations to Existing Saves">
							<MudIconButton Icon="@MaterialDesignIcons.Normal.FileRefresh" Color="Color.Secondary" OnClick="@(() => ReapplyEnhancementsAsync(selectedChronicle))" Disabled="@(Observed(() => Archivist.State) is ArchivistState.Ingesting)" />
						</MudTooltip>
						<MudTooltip Arrow Color="Color.Warning" Placement="Placement.Left" Text="Show this Chronicle's Database">
							<MudIconButton Color="Color.Warning" Icon="@MaterialDesignIcons.Normal.DatabaseSearch" OnClick="@(new Func<MouseEventArgs, Task>(e => ShowChronicleDatabaseAsync(selectedChronicle)))" />
						</MudTooltip>
					</MudStack>
				</div>
				<MudGrid Justify="Justify.Center" Spacing="1">
					<MudItem xs="12">
						<MudTable T="Snapshot" Items="@(ObservedCollection(() => selectedChronicle.Snapshots).OrderByDescending(s => s.LastWriteTime))" Breakpoint="Breakpoint.Sm" Dense Filter="IncludeSnapshot" Class="mt-2">
							<ToolBarContent>
								<MudTextM3 Typo="TypoM3.Title" Style="width: 80%;">Snapshots</MudTextM3>
								<MudSpacer />
								<MudTextField @bind-Value="@snapshotsTextSearch" Placeholder="@StringLocalizer[nameof(AppText.Common_Search)]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Immediate Clearable DebounceInterval="250" Class="mt-0" />
							</ToolBarContent>
							<RowTemplate>
								<MudTd>
									<MudStack Row AlignItems="AlignItems.Center">
										<MudTooltip Arrow Text="View Details about this Snapshot">
											<MudToggleIconButton @bind-Toggled="context.ShowDetails" Icon="@MaterialDesignIcons.Normal.ChevronRight" ToggledIcon="@MaterialDesignIcons.Normal.ChevronDown" Size="Size.Small" />
										</MudTooltip>
										<MudIcon Icon="@MaterialDesignIcons.Normal.Timeline" Size="Size.Small" />
										<MudTextM3>
											<MudHighlighter Text="@(Observed(() => context.LastWriteTime).ToString("g"))" HighlightedText="@snapshotsTextSearch" />
										</MudTextM3>
									</MudStack>
								</MudTd>
								<MudTd DataLabel="Label">
									<MudTextM3>
										<MudHighlighter Text="@(Observed(() => context.Label))" HighlightedText="@snapshotsTextSearch" />
									</MudTextM3>
								</MudTd>
								<MudTd>
									<MudStack Row Justify="Justify.FlexEnd" AlignItems="AlignItems.Center" Spacing="1">
										@if (context.WasLive)
										{
											<MudTooltip Arrow Text="The game had just written the save from which this snapshot was taken. Click here to search for all Live snapshots.">
												<MudChip T="object" Size="Size.Small" Icon="@MaterialDesignIcons.Normal.GamepadSquare" Class="ma-0" OnClick="@(new Action<MouseEventArgs>(e => snapshotsTextSearch = "Live"))">
													<MudHighlighter Text="Live" HighlightedText="@snapshotsTextSearch" />
												</MudChip>
											</MudTooltip>
										}
										@if (context.ActiveHouseholdName is { } activeHouseholdName)
										{
											<MudTooltip Arrow Text="This is the household you were controlling when this snapshot's save was written. Click here to search for all snapshots during which this was the case.">
												<MudChip T="object" Size="Size.Small" Icon="@MaterialDesignIcons.Normal.Home" Class="ma-0" OnClick="@(new Action<MouseEventArgs>(e => snapshotsTextSearch = activeHouseholdName))">
													<MudHighlighter Text="@activeHouseholdName" HighlightedText="@snapshotsTextSearch" />
												</MudChip>
											</MudTooltip>
										}
										@if (context.LastPlayedLotName is { } lastPlayedLotName)
										{
											<MudTooltip Arrow Text="This is the lot you were on when this snapshot's save was written. Click here to search for all snapshots during which this was the case.">
												<MudChip T="object" Size="Size.Small" Icon="@MaterialDesignIcons.Normal.MapMarker" Class="ma-0" OnClick="@(new Action<MouseEventArgs>(e => snapshotsTextSearch = lastPlayedLotName))">
													<MudHighlighter Text="@lastPlayedLotName" HighlightedText="@snapshotsTextSearch" />
												</MudChip>
											</MudTooltip>
										}
										@if (context.LastPlayedWorldName is { } lastPlayedWorldName)
										{
											<MudTooltip Arrow Text="This is the world you were in when this snapshot's save was written. Click here to search for all snapshots during which this was the case.">
												<MudChip T="object" Size="Size.Small" Icon="@MaterialDesignIcons.Normal.Map" Class="ma-0" OnClick="@(new Action<MouseEventArgs>(e => snapshotsTextSearch = lastPlayedWorldName))">
													<MudHighlighter Text="@lastPlayedWorldName" HighlightedText="@snapshotsTextSearch" />
												</MudChip>
											</MudTooltip>
										}
										<MudTooltip Arrow Text="Restore this Snapshot to The Sims 4 Saves Folder" Color="Color.Secondary">
											<MudIconButton Icon="@MaterialDesignIcons.Normal.FileRestore" Color="Color.Secondary" Size="Size.Small" OnClick="@(new Func<MouseEventArgs, Task>(e => RestoreSavePackageAsync(context)))" Disabled="@(Observed(() => Archivist.State) is ArchivistState.Ingesting)" />
										</MudTooltip>
										<MudTooltip Arrow Text="Create a New Chronicle by Branching from this Snapshot" Color="Color.Secondary">
											<MudIconButton Icon="@MaterialDesignIcons.Normal.CallSplit" Color="Color.Secondary" Size="Size.Small" OnClick="@(new Func<MouseEventArgs, Task>(e => CreateBranchAsync(context)))" Disabled="@(Observed(() => Archivist.State) is ArchivistState.Ingesting || !Observed(() => Archivist.CanSafelyUpdateSaveGameData))" />
										</MudTooltip>
										<MudTooltip Arrow Text="Save this Snapshot in The Sims 4's Format" Color="Color.Secondary">
											<MudIconButton Icon="@MaterialDesignIcons.Normal.FileExport" Color="Color.Secondary" Size="Size.Small" OnClick="@(new Func<MouseEventArgs, Task>(e => ExportSavePackageAsync(context)))" />
										</MudTooltip>
									</MudStack>
								</MudTd>
							</RowTemplate>
							<ChildRowContent>
								@if (context.ShowDetails)
								{
									<MudTr>
										<td colspan="3" class="relative py-4">
											<div class="d-flex gap-4 align-start px-4">
												@if (Observed(() => context.ThumbnailUri) is { Length: > 0 } thumbnailUri)
												{
													<MudImage Src="@thumbnailUri" Width="180" Height="120" ObjectFit="ObjectFit.Contain" ObjectPosition="ObjectPosition.Center" />
												}
												<MudStack Spacing="1" Class="flex-grow-1">
													@if (context.IsEditing)
													{
														<MudPaper>
															<MudAlert Severity="Severity.Warning">
																Changes you make here take effect immediately, whether or not you've clicked the check.
															</MudAlert>
														</MudPaper>
														<MudTextField @bind-Value="@Binding(() => context.Label).Value" Variant="Variant.Filled" Label="Label" AdornmentIcon="@MaterialDesignIcons.Normal.Label" Adornment="Adornment.Start" DebounceInterval="250" />
														<MudTextField @bind-Value="@Binding(() => context.Notes).Value" Variant="Variant.Filled" Label="Notes" Lines="5" AdornmentIcon="@MaterialDesignIcons.Normal.Note" Adornment="Adornment.Start" Clearable DebounceInterval="250" />
													}
													else
													{
														<MudTextM3 Typo="TypoM3.Title" Class="mt-2">
															<MudHighlighter Text="@(Observed(() => context.Label))" HighlightedText="@snapshotsTextSearch" />
														</MudTextM3>
														@if (Observed(() => context.Notes) is { } notes && !string.IsNullOrWhiteSpace(notes))
														{
															<div class="manual-markdown">
																<MudHighlighter Text="@(Markdown.Parse(notes).ToHtml())" HighlightedText="@snapshotsTextSearch" Markup />
															</div>
														}
													}
													<MudStack Row>
														@if (Observed(() => context.ThumbnailUri) is { Length: > 0 })
														{
															<MudButton Variant="Variant.Filled" StartIcon="@MaterialDesignIcons.Outline.ImageCheck" Disabled="@(Observed(() => Archivist.State) is ArchivistState.Ingesting)" OnClick="@(new Func<MouseEventArgs, Task>(e => context.UseThumbnailForChronicleAsync(DialogService)))">
																Use Thumbnail for Chronicle
															</MudButton>
														}
														@if (context.WasLive)
														{
															<MudButton Variant="Variant.Filled" StartIcon="@MaterialDesignIcons.Outline.InvoiceExport" OnClick="@(new Func<MouseEventArgs, Task>(e => ExportModListAsync(context)))">
																Export Mod List
															</MudButton>
														}
													</MudStack>
												</MudStack>
												<MudStack Spacing="0">
													<MudTooltip Arrow Placement="Placement.Left" Text="Edit this Snapshot's Details">
														<MudToggleIconButton @bind-Toggled="@context.IsEditing" Icon="@MaterialDesignIcons.Normal.Pencil" ToggledIcon="@MaterialDesignIcons.Normal.Check" Disabled="@(Observed(() => Archivist.State) is ArchivistState.Ingesting)" />
													</MudTooltip>
													<MudTooltip Arrow Placement="Placement.Left" Text="Try to Find this Save in the Saves Folder">
														<MudIconButton Icon="@MaterialDesignIcons.Normal.FileFind" OnClick="@(new Func<MouseEventArgs, Task>(e => ShowSavePackageInSavesDirectoryAsync(context)))" />
													</MudTooltip>
													<MudTooltip Arrow Color="Color.Warning" Placement="Placement.Left" Text="Permanently Delete all Snapshots preceding this one and Reclaim Space">
														<MudIconButton Icon="@MaterialDesignIcons.Normal.TimelineRemove" Color="Color.Warning" OnClick="@(new Func<MouseEventArgs, Task>(e => DeletePreviousSnapshotsAsync(context)))" Disabled="@(Observed(() => Archivist.State) is ArchivistState.Ingesting)" />
													</MudTooltip>
												</MudStack>
											</div>
										</td>
									</MudTr>
								}
							</ChildRowContent>
							<PagerContent>
								<MudTablePager />
							</PagerContent>
						</MudTable>
					</MudItem>
				</MudGrid>
			}
		</div>
	</MudItem>
</MudGrid>
